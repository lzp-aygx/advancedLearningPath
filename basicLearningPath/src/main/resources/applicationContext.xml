<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
                           http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 将多个配置文件读取到容器中，将配置变量交给Spring管理
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:/jdbc.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="utf-8"></property>
	</bean>
	-->

	<!-- bean对象配置手写方法.IOC容器bean对象配置  scpoe是设置bean对象是多例或者单例singleton和prototype,并且默认是singleton，延迟加载只对单例的情况有效默认是false
	<bean id="User" scope="singleton" class="com.csm.model.User" lazy-init="true">
		<constructor-arg index="0" type="java.lang.String" value="Lzp"></constructor-arg>
		<constructor-arg index="1" type="int" value="8"></constructor-arg>
	</bean>
	   -->


	<!-- 注解扫描包，完成Bean创建和自动依赖注入的功能
	<context:component-scan base-package="study.*" />-->

	<!--Spring bean 生命周期 Spring 提供两个接口,通过实现InitializingBean和DisposableBean来设置bean初始化之后的操作和销毁之前做的操作-->
	<!--也可以在bean配置文件中指定init-method 和destroy-method的值来设置bean初始化之后的操作和销毁之前做的操作-->
	<!--也可以使用@PostConstruct和@PreDestroy注解来指定init和destroy方法-->



	<!--Spring与CXF整合，发布WebService
	 WebService发布地址=tomcat地址+CXF在Web.xml中servlet的路径+jaxws:server中的address-->
	<!--把自己编写好的WebSerivce实现类配置进Spring容器-->
	<!--
	<bean id="HelloWorldService" class="study.CXF.HelloWorldService"></bean>
	<jaxws:server address="/HelloWorldService" serviceClass="study.CXF.HelloWorldServiceInterface">
		<jaxws:serviceBean>
			<ref bean="HelloWorldService"/>
		</jaxws:serviceBean>
		<jaxws:inInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor"></bean>
		</jaxws:inInterceptors>
		<jaxws:outInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor"></bean>
		</jaxws:outInterceptors>
	</jaxws:server>
	-->
	<!--import deployed WebService from public network-->
    <!--
	<jaxws:client id="helloWorldClient" address="http://localhost:8080/learningPath/webService/HelloWorldService?wsdl"
				  serviceClass ="cn.learningpath.service.HelloWorldName">
	</jaxws:client>
	-->

	<!--Spring与CXF整合,发布rest服务接口-->
	<!--引入自己编写好的rest服务接口的实现类-->
    <!--
	<bean id="UserService" class="study.CXF.restful.UserServiceImpl"/>
	-->
	<!--发布Restful服务接口-->
    <!--
	<jaxrs:server address="/rest">
		<jaxrs:serviceBeans>
			<ref bean="UserService"/>
		</jaxrs:serviceBeans>
	</jaxrs:server>
    -->
	<!--配置ActiveMQ
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">

	</bean>-->

    <!--配置webSocket的处理类与握手协议到spring容器
    <bean id="websocket"  class="study.springMVC.WebsocketHandler"></bean>
    <websocket:handlers>
        <websocket:mapping path="/websocket" handler="websocket"/>
        <websocket:handshake-interceptors>
            <bean class="study.springMVC.WebsocketHandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>
    -->
</beans>